#!/bin/bash

# Create a new directory and enter it
function mkd() {
    # shellcheck disable=SC2164
    mkdir -p "$@" && cd "$_";
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${*%/}.tar";
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1;

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null; # GNU `stat`
    );

    local cmd="";
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli";
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz";
        else
            cmd="gzip";
        fi;
    fi;

    echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…";
    "${cmd}" -v "${tmpFile}" || return 1;
    [ -f "${tmpFile}" ] && rm "${tmpFile}";

    zippedSize=$(
        stat -f"%z" "${tmpFile}.gz" 2> /dev/null; # macOS `stat`
        stat -c"%s" "${tmpFile}.gz" 2> /dev/null; # GNU `stat`
    );

    echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully.";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$*" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# Use Git’s colored diff when available
if hash git &>/dev/null; then
    function diff() {
        git diff --no-index --color-words "$@";
    }
fi;

# Create a data URL from a file
function dataurl() {
    local mimeType;
    mimeType=$(file -b --mime-type "$1");
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8";
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')";
}

# Compare original and gzipped file size
function gz() {
    local origsize;
    local gzipsize;
    local ratio;
    origsize=$(wc -c < "$1");
    gzipsize=$(gzip -c "$1" | wc -c);
    ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
    printf "orig: %d bytes\\n" "$origsize";
    printf "gzip: %d bytes (%2.2f%%)\\n" "$gzipsize" "$ratio";
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript;
    else # pipe
        python -mjson.tool | pygmentize -l javascript;
    fi;
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified.";
        return 1;
    fi;

    local domain="${1}";
    echo "Testing ${domain}…";
    echo ""; # newline

    local tmp;
    tmp=$(echo -e "GET / HTTP/1.0\\nEOT" \
        | openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText;
        certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
            no_serial, no_sigdump, no_signame, no_validity, no_version");
        echo "Common Name:";
        echo ""; # newline
        echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\\/emailAddress=.*//";
        echo ""; # newline
        echo "Subject Alternative Name(s):";
        echo ""; # newline
        echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
            | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\\n" | tail -n +2;
        return 0;
    else
        echo "ERROR: Certificate not found.";
        return 1;
    fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
    if [ $# -eq 0 ]; then
        xopen .;
    else
        xopen "$@";
    fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
    tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# Generate a new go project
function gonew() {
    local dir;
    dir="$GOPATH/src/github.com/gmcabrita/$1";
    mkdir -p "$dir";
    cd "$dir" || exit;
    curl -sO https://gist.githubusercontent.com/gmcabrita/8edafe7ecb4874a58f84d35d0bc11bb8/raw/.travis.yml;
    curl -sO https://gist.githubusercontent.com/gmcabrita/8edafe7ecb4874a58f84d35d0bc11bb8/raw/README.md;
    curl -sO https://gist.githubusercontent.com/gmcabrita/8edafe7ecb4874a58f84d35d0bc11bb8/raw/LICENSE;
    curl -sO https://gist.githubusercontent.com/gmcabrita/8edafe7ecb4874a58f84d35d0bc11bb8/raw/.gitignore;
    curl -sO https://gist.githubusercontent.com/gmcabrita/8edafe7ecb4874a58f84d35d0bc11bb8/raw/Makefile;
    sed -i "s/FIXME/$1/g" README.md;
}

function imports ()
{
    go list -f "$(printf '{{.ImportPath}}:\n{{range .Imports}}  {{.}}\n{{end}}')" ${1+"$@"};
}

# Output TODOs for the current folder
function todo() {
    grep \
        --exclude-dir=vendor \
        --exclude-dir=_build \
        --exclude-dir=.venv \
        --text \
        --color \
        -nRo 'TODO:.*\|FIXME:.*\|HACK:.*\|XXX:.*\|OPTIMIZE:.*' "$@";
}

# Change to the directory of the specified Go package name.
function gg() {
    mapfile -t paths < <(ggg "$@");
    path_index=0;

    if [ ${#paths[@]} -gt 1 ]; then
        c=1;
        for path in "${paths[@]}"; do
            echo [$c]: cd "${GOPATH}/${path}";
            c=$((c+1));
        done;
        echo -n "Go to which path: ";
        read -r path_index;

        path_index=$((path_index-1));
    fi;

    path=${paths[$path_index]};
    cd "$GOPATH/src/$path" || exit;
}

# Print the directories of the specified Go package name.
function ggg() {
    local pkg_candidates;
    pkg_candidates="$( (cd "$GOPATH/src" && find . -mindepth 1 -maxdepth 5 -type d \( -path "*/$1" -or -path "*/$1.git" \) -print) | sed 's/^\.\///g')";
    echo "$pkg_candidates";
}

function xopen() {
    xdg-open "$@" 2>/dev/null
}

function logbook() {
    $EDITOR "$HOME/Dropbox/logbook/$(date '+%Y-%m-%d').md"
}
