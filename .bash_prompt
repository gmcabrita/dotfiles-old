#!/bin/bash


__el_LAST_EXECUTED_COMMAND=""
print_title () {
    __el_FIRSTPART=""
    __el_SECONDPART=""
    if [ "$PWD" == "$HOME" ]; then
        __el_FIRSTPART=$(gettext --domain="pantheon-files" "Home")
    else
        if [ "$PWD" == "/" ]; then
            __el_FIRSTPART="/"
        else
            __el_FIRSTPART="${PWD##*/}"
        fi
    fi
    if [[ "$__el_LAST_EXECUTED_COMMAND" == "" ]]; then
        echo "$__el_FIRSTPART"
        return
    fi
    # trim the command to the first segment and strip sudo
    if [[ "$__el_LAST_EXECUTED_COMMAND" == sudo* ]]; then
        __el_SECONDPART="${__el_LAST_EXECUTED_COMMAND:5}"
        __el_SECONDPART="${__el_SECONDPART%% *}"
    else
        __el_SECONDPART="${__el_LAST_EXECUTED_COMMAND%% *}"
    fi
    printf "%s: %s" "$__el_FIRSTPART" "$__el_SECONDPART"
}

put_title() {
    __el_LAST_EXECUTED_COMMAND="${BASH_COMMAND}"
    printf "\\033]0;%s\\007" "$1"
}

# Show the currently running command in the terminal title:
# http://www.davidpashley.com/articles/xterm-titles-with-bash.html
update_tab_command() {
    # catch blacklisted commands and nested escapes
    case "$BASH_COMMAND" in
        *\\033]0*|update_*|echo*|printf*|clear*|cd*)
        __el_LAST_EXECUTED_COMMAND=""
            ;;
        *)
        put_title "${BASH_COMMAND}"
        ;;
    esac
}

preexec_functions+=(update_tab_command)


prompt_kubectl() {
    local hasContext;
    # local namespace;
    local context;
    hasContext=$(kubectl config current-context &>/dev/null; echo "${?}");

    if [[ "$hasContext" == "0" ]]; then
        # namespace="$(kubectl config view --minify --output 'jsonpath={..namespace}' 2>/dev/null)";
        context="$(kubectl config current-context)";
        # if [[ -z "$namespace" ]]; then
        #     namespace="default";
        # fi

        # echo -e "${1}${cyan}${namespace}${white}:${cyan}${context}";
        echo -e "${1}${cyan}${context}";
    fi
}

prompt_git() {
    local s='';
    local branchName='';

    # Check if the current directory is in a Git repository.
    if [ "$(git rev-parse --is-inside-work-tree &>/dev/null; echo "${?}")" == '0' ]; then

        # check if the current directory is in .git before running git checks
        if [ "$(git rev-parse --is-inside-git-dir 2> /dev/null)" == 'false' ]; then

            # Ensure the index is up to date.
            git update-index --really-refresh -q &>/dev/null;

            # Check for uncommitted changes in the index.
            if ! git diff --quiet --ignore-submodules --cached; then
                s+='+';
            fi;

            # Check for unstaged changes.
            if ! git diff-files --quiet --ignore-submodules --; then
                s+='!';
            fi;

            # Check for untracked files.
            if [ -n "$(git ls-files --others --exclude-standard)" ]; then
                s+='?';
            fi;

            # Check for stashed files.
            if git rev-parse --verify refs/stash &>/dev/null; then
                s+='$';
            fi;

        fi;

        # Get the short symbolic ref.
        # If HEAD isn’t a symbolic ref, get the short SHA for the latest commit
        # Otherwise, just give up.
        branchName="$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \
            git rev-parse --short HEAD 2> /dev/null || \
            echo '(unknown)')";

        [ -n "${s}" ] && s=" [${s}]";

        echo -e "${1}${branchName}${2}${s}";
    else
        return;
    fi;
}

if tput setaf 1 &> /dev/null; then
    tput sgr0; # reset colors
    bold=$(tput bold);
    reset=$(tput sgr0);
    # Solarized colors, taken from http://git.io/solarized-colors.
    black=$(tput setaf 0);
    blue=$(tput setaf 33);
    cyan=$(tput setaf 37);
    green=$(tput setaf 64);
    orange=$(tput setaf 166);
    purple=$(tput setaf 125);
    red=$(tput setaf 124);
    violet=$(tput setaf 61);
    white=$(tput setaf 15);
    yellow=$(tput setaf 136);
else
    bold='';
    reset="\\e[0m";
    # shellcheck disable=SC2034
    black="\\e[1;30m";
    blue="\\e[1;34m";
    # shellcheck disable=SC2034
    cyan="\\e[1;36m";
    green="\\e[1;32m";
    orange="\\e[1;33m";
    # shellcheck disable=SC2034
    purple="\\e[1;35m";
    red="\\e[1;31m";
    violet="\\e[1;35m";
    white="\\e[1;37m";
    yellow="\\e[1;33m";
fi;

# Highlight the user name when logged in as root.
if [[ "${USER}" == "root" ]]; then
    userStyle="${red}";
else
    userStyle="${orange}";
fi;

# Highlight the hostname when connected via SSH.
if [[ "${SSH_TTY}" ]]; then
    hostStyle="${bold}${red}";
else
    hostStyle="${yellow}";
fi;

# Set the terminal title and prompt.
PS1="\\[\\033]0;\\W\\007\\]"; # working directory base name
PS1+="\\[${bold}\\]\\n"; # newline
PS1+="\\[${userStyle}\\]\\u"; # username
PS1+="\\[${white}\\] at ";
PS1+="\\[${hostStyle}\\]\\h"; # host
PS1+="\\[${white}\\] in ";
PS1+="\\[${green}\\]\\w"; # working directory full path
PS1+="\$(prompt_git \"\\[${white}\\] on \\[${violet}\\]\" \"\\[${blue}\\]\")"; # Git repository details
PS1+="\$(prompt_kubectl \"\\[${white}\\] with \\[${violet}\\]\")"; # Kubernetes context details
PS1+="\\n";
PS1+="\\[${white}\\]\$ \\[${reset}\\]\\[\\e]0;\$(print_title)\\a\\]"; # `$` (and reset color)
export PS1;

PS2="\\[${yellow}\\]→ \\[${reset}\\]";
export PS2;
