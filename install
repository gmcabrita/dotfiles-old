#!/usr/bin/env bash
# shellcheck disable=SC1090

set -e
set -o pipefail

# chooses a user account to use for the installation
get_user() {
    if [ -z "${TARGET_USER-}" ]; then
        PS3='Which user account should be used? '
        mapfile -t options < <(find /home/* -maxdepth 0 -printf "%f\\n" -type d)
        select opt in "${options:?[@]}"; do
            readonly TARGET_USER=$opt
            break
        done
    fi
}

# checks if we are running as root
check_is_sudo() {
    if [ "$(id -u)" -ne 0 ]; then
        echo "Please run as root."
        exit
    fi
}

# checks if we are running without
check_isnt_sudo() {
    if [ "$(id -u)" -eq 0 ]; then
        echo "Please run without root."
        exit
    fi
}

setup_linux() {
    apt update || true
    apt upgrade -y
    apt install -y \
        curl \
        wget \
        snapd \
        apt-transport-https \
        ca-certificates \
        software-properties-common

    add-apt-repository ppa:apt-fast/stable -y -n
    add-apt-repository ppa:git-core/ppa -y -n
    add-apt-repository ppa:obsproject/obs-studio -y -n

    # docker
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
    echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu eoan edge" > /etc/apt/sources.list.d/docker.list

    # google-cloud-sdk
    echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | tee /etc/apt/sources.list.d/google-cloud-sdk.list
    curl -sS https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

    # yarn
    curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
    echo "deb https://dl.yarnpkg.com/debian/ stable main" > /etc/apt/sources.list.d/yarn.list

    # spotify
    curl -sS https://download.spotify.com/debian/pubkey.gpg | apt-key add -
    echo "deb http://repository.spotify.com stable non-free" | tee /etc/apt/sources.list.d/spotify.list

    # chrome
    curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | apt-key add -
    echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list

    # sublime text
    curl -fsSL https://download.sublimetext.com/sublimehq-pub.gpg | apt-key add -
    echo "deb https://download.sublimetext.com/ apt/stable/" > /etc/apt/sources.list.d/sublime-text.list

    # slack
    curl -fsSL https://packagecloud.io/slacktechnologies/slack/gpgkey | apt-key add -
    echo "deb https://packagecloud.io/slacktechnologies/slack/debian/ jessie main" > /etc/apt/sources.list.d/slack.list

    apt update || true
    apt upgrade -y
    apt install -y apt-fast
    apt-fast install -y \
        "linux-headers-$(uname -r)" \
        "linux-tools-$(uname -r)" \
        alsa-tools-gui \
        anki \
        arandr \
        aspell \
        aspell-pt-pt \
        autoconf \
        automake \
        binutils-multiarch \
        blueman \
        build-essential \
        clang \
        cmake \
        docker-ce \
        dos2unix \
        dstat \
        earlyoom \
        exuberant-ctags \
        ffmpeg \
        fish \
        fonts-hack-ttf \
        fonts-noto-color-emoji \
        fop \
        fzf \
        gdb \
        git \
        git-extras \
        gnome-tweaks \
        gnupg2 \
        gnuplot \
        google-chrome-stable \
        google-cloud-sdk \
        graphviz \
        htop \
        icu-devtools \
        imagemagick \
        inotify-tools \
        iotop \
        jq \
        libbsd-dev \
        libbz2-dev \
        libcanberra-gtk-module \
        libcanberra-gtk3-module \
        libcap-dev \
        libcurl4 \
        libcurl4-openssl-dev \
        libedit-dev \
        libelf-dev \
        libffi-dev \
        libgit2-dev \
        libgl1-mesa-dev \
        libglu1-mesa-dev \
        libgmp-dev \
        libicu-dev \
        libjemalloc-dev \
        liblldb-dev \
        liblttng-ust0 \
        libncurses5-dev \
        libncursesw5-dev \
        libopenblas-base \
        libopenblas-dev \
        libpcap-dev \
        libpng-dev \
        libpq-dev \
        libpython-dev \
        libreadline-dev \
        libsecret-1-dev \
        libsqlite3-dev \
        libssh-dev \
        libssh2-1-dev \
        libssl-dev \
        libtool \
        libu2f-host-dev \
        libunwind-dev \
        libunwind8 \
        libwxgtk3.0-dev \
        libxml2-dev \
        libxml2-utils \
        libxslt1-dev \
        libxslt1-dev \
        libyaml-dev \
        linux-image-extra-virtual \
        linux-tools-common \
        linux-tools-generic \
        lldb \
        lldb \
        llvm \
        lnav \
        m4 \
        mosh \
        mpv \
        ncdu \
        ncurses-base \
        nethogs \
        ninja-build  \
        obs-studio \
        openjdk-13-jdk \
        openjdk-13-jre \
        opensc \
        openshot \
        openssl \
        p7zip-full \
        pavucontrol \
        pcregrep \
        pcsc-tools \
        pcscd \
        pkg-config \
        postgresql-client-11 \
        postgresql-client-common \
        pv \
        python \
        python3 \
        python3-pip \
        qemu-kvm \
        r-base \
        ranger \
        readline-common \
        ripgrep \
        rlwrap \
        scdaemon \
        shotwell \
        slack-desktop \
        snapd-xdg-open \
        software-properties-common \
        spotify-client \
        squashfs-tools \
        sublime-merge \
        sublime-text \
        swig \
        systemtap \
        tk-dev \
        tmux \
        transmission \
        tree \
        ttf-ubuntu-font-family \
        ubuntu-restricted-extras \
        unixodbc \
        unixodbc-dev \
        uuid-dev \
        valgrind \
        vim \
        xclip \
        xdot \
        xsltproc \
        xz-utils \
        yarn \
        zlib1g-dev \
        zlibc

    truncate -s 0 /etc/sysctl.conf
    {
        # run perf without root
        echo "kernel.perf_event_paranoid = -1"
        echo "kernel.kptr_restrict=0"

        # elasticsearch
        echo "vm.max_map_count=262144" >> /etc/sysctl.conf

        # inotify limits
        echo "fs.inotify.max_user_watches = 1048576" >> /etc/sysctl.conf
    } >> /etc/sysctl.conf
    sysctl -p

    # heroku
    snap install heroku --classic

    # asciinema
    snap install asciinema --classic

    # edge shellcheck
    snap install --channel=edge shellcheck --classic

    # setup docker for non-root
    usermod -aG docker "$TARGET_USER"

    apt remove -y firefox

    # setup keyboard
    sed -i 's/^XKBOPTIONS=.*/XKBOPTIONS="compose:ralt,caps:none"/g' /etc/default/keyboard
    sed -i 's/^XKBLAYOUT=.*/XKBLAYOUT="us"/g' /etc/default/keyboard
    dpkg-reconfigure keyboard-configuration -f noninteractive

    # discord
    wget -O discord.deb "https://discordapp.com/api/download?platform=linux&format=deb"
    apt install -y ./discord.deb
    rm discord.deb
    # TODO: check if this is still needed on Ubuntu 19.10 (or 20.04), all it does is enable the AppIndicator
    # sed -i 's/^Exec=.*/Exec=env XDG_CURRENT_DESKTOP=Unity \/usr\/share\/discord\/Discord/g' /usr/share/applications/discord.desktop

    # github cli
    wget -O github_cli.deb "$(curl -s https://api.github.com/repos/cli/cli/releases/latest | jq -r '.assets[] | select(.name|test(".*_linux_amd64.deb")).browser_download_url')"
    apt install -y ./github_cli.deb
    rm github_cli.deb

    # steam
    wget -O steam.deb https://steamcdn-a.akamaihd.net/client/installer/steam.deb
    apt install -y ./steam.deb
    rm steam.deb

    # zoom
    wget -O zoom.deb "https://zoom.us/client/latest/zoom_amd64.deb"
    apt install -y ./zoom.deb
    rm zoom.deb

    # set docker to autostart
    systemctl enable docker

    # set sublime text as default editor
    update-alternatives --install /usr/bin/editor editor /usr/bin/subl 90
    update-alternatives --set editor /usr/bin/subl

    # show nothing on grub boot
    sed -i 's/^GRUB_CMDLINE_LINUX_DEFAULT=.*/GRUB_CMDLINE_LINUX_DEFAULT=""/g' /etc/default/grub
    # change plymouth background to black
    sed -i 's/^black=.*/black=0x000000/g' /usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth
    sed -i 's/^white=.*/white=0xffffff/g' /usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth
    sed -i 's/^brown=.*/brown=0x000000/g' /usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth
    sed -i 's/^blue=.*/blue=0x000000/g' /usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth
    # change default plymouth grub background
    sed -i 's/44,0,30,0/0,0,0,0/g' /etc/alternatives/default.plymouth.grub
    sed -i 's/44,0,30,0/0,0,0,0/g' /usr/share/plymouth/themes/ubuntu-logo/ubuntu-logo.grub
    update-initramfs -u
    update-grub

    # install and start tlp if we are on a laptop
    read -rp "Do you want to install TLP? (y/n) " -n 1
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        apt-fast install -y tlp
        tlp start
    fi

    apt autoremove -y
}

# installs some extra fonts
install_fonts() {
    cd "$(dirname "${BASH_SOURCE[0]}")"
    cp -r .fonts/* /usr/share/fonts
    fc-cache -f -v
}

# checks if asdf is installed and installs it
check_asdf_and_install() {
    if [ ! -d "$HOME/.asdf" ]; then
        install_asdf
    fi
}

# checks if pyenv is installed and installs/updates it
check_pyenv_and_install() {
    if [ ! -d "$HOME/.pyenv" ]; then
        install_pyenv
    else
        update_pyenv
    fi
}

# checks if rbenv is installed and installs/updates it
check_rbenv_and_install() {
    if [ ! -d "$HOME/.rbenv/bin" ]; then
        install_rbenv
    else
        update_rbenv
    fi
}

# installs asdf
install_asdf() {
    git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.6.3
    . ~/.asdf/asdf.sh || true
    asdf update
}

# installs pyenv
install_pyenv() {
    curl -fsSL https://raw.githubusercontent.com/pyenv/pyenv-installer/master/bin/pyenv-installer | bash
    . ~/.config/fish/config.fish || true
}

update_pyenv() {
    (
        set -e
        cd "$(pyenv root)"
        git pull
    )
}

# installs rbenv
install_rbenv() {
    mkdir -p ~/.rbenv
    (
        cd ~/.rbenv
        git init
        git remote add origin https://github.com/rbenv/rbenv.git
        git fetch
        git branch master origin/master
        git checkout master
        src/configure && make -C src
        git clone https://github.com/rbenv/rbenv-default-gems.git plugins/rbenv-default-gems
        git clone https://github.com/rbenv/ruby-build.git plugins/ruby-build
    )
    . ~/.config/fish/config.fish || true
}

update_rbenv() {
    (
        set -e
        cd "$(rbenv root)" && git pull && src/configure && make -C src
        cd plugins/ruby-build && git pull
    )
}

# installs ruby
install_ruby() {
    rubyv="2.7.0"
    RUBY_CONFIGURE_OPTS="--with-jemalloc" rbenv install "$rubyv" --skip-existing || true
    rbenv global "$rubyv"
}

# installs go and some go packages
install_golang() {
    golangv="1.14"
    asdf plugin-add go https://github.com/kennyp/asdf-golang || true
    asdf install go "$golangv" || true
    asdf global go "$golangv"

    go get -u -v \
        github.com/rakyll/hey \
        honnef.co/go/tools/cmd/... \
        golang.org/x/tools/cmd/... \
        github.com/nektos/act \
        github.com/DarthSim/hivemind \
        github.com/DarthSim/overmind \
        github.com/go-delve/delve/cmd/dlv \
        github.com/davecheney/httpstat
}

# installs python and some python packages
install_python() {
    pythonv="3.8.2"
    pyenv install -s "$pythonv"
    pyenv global "$pythonv"

    pip install -U \
        codemod \
        docker-compose \
        httpie \
        litecli \
        pgcli \
        pip \
        py-spy \
        seashells
}

# installs nodejs and some nodejs packages
install_nodejs() {
    nodejsv="12.16.1"
    asdf plugin-add nodejs https://github.com/asdf-vm/asdf-nodejs.git || true
    bash ~/.asdf/plugins/nodejs/bin/import-release-team-keyring
    asdf install nodejs "$nodejsv" || true
    asdf global nodejs "$nodejsv"

    npm install -g llnode
}


# updates the local dotfiles with the ones in the repository
get_dotfiles() {
    cd "$(dirname "${BASH_SOURCE[0]}")"

    rm ~/.config/fish/env/* || true
    rm ~/.config/fish/functions/* || true

    rsync --quiet \
        --exclude ".git/" \
        --exclude ".fonts/" \
        --exclude "install" \
        --exclude "README.md" \
        --exclude "LICENSE" \
        -avh --no-perms . ~

    if [ ! -f ~/.bin/ngrok ] || [ "$1" == "-f" ]; then
        wget -q https://bin.equinox.io/c/4VmDzA7iaHb/ngrok-stable-linux-amd64.zip
        unzip -qu ngrok-stable-linux-amd64.zip ngrok -d ~/.bin
        chmod a+x+r ~/.bin/ngrok
        rm ngrok-stable-linux-amd64.zip
    fi

    if [ ! -f ~/.bin/ctop ] || [ "$1" == "-f" ]; then
        wget -qO ~/.bin/ctop "$(curl -s https://api.github.com/repos/bcicen/ctop/releases/latest | grep -oP "browser_download_url.*\K(https://.*linux-amd64)")"
        chmod a+x+r ~/.bin/ctop
    fi

    if [ ! -f ~/.bin/rbspy ] || [ "$1" == "-f" ]; then
        curl -sL "$(curl -s https://api.github.com/repos/rbspy/rbspy/releases/latest | grep -oP "browser_download_url.*\K(https://.*unknown-linux-musl.tar.gz)")" | tar -xzf - -C ~/.bin
        chmod a+x+r ~/.bin/rbspy
    fi

    if [ ! -f ~/.bin/stern ] || [ "$1" == "-f" ]; then
        wget -qO ~/.bin/stern "$(curl -s https://api.github.com/repos/wercker/stern/releases/latest | grep -oP "browser_download_url.*\K(https://.*linux_amd64)")"
        chmod a+x+r ~/.bin/stern
    fi
}

usage() {
    echo -e "install\\n"
    echo "Usage:"
    echo "  linux                     - setup sources & install os pkgs"
    echo "  fonts                     - setup fonts"
    echo "  dotfiles                  - fetch dotfiles"
    echo "  python                    - install python and packages"
    echo "  golang                    - install golang and packages"
    echo "  nodejs                    - install nodejs"
    echo "  ruby                      - install ruby"
}

main() {
    local cmd=$1

    if [[ -z "$cmd" ]]; then
        usage
        exit 1
    fi

    if [[ $cmd == "linux" ]]; then
        check_is_sudo
        get_user
        setup_linux
        install_fonts
    elif [[ $cmd == "fonts" ]]; then
        check_is_sudo
        install_fonts
    elif [[ $cmd == "dotfiles" ]]; then
        check_isnt_sudo
        get_dotfiles "$2"
    elif [[ $cmd == "ruby" ]]; then
        check_isnt_sudo
        check_rbenv_and_install
        install_ruby
    elif [[ $cmd == "golang" ]]; then
        check_isnt_sudo
        check_asdf_and_install
        install_golang
    elif [[ $cmd == "python" ]]; then
        check_isnt_sudo
        check_pyenv_and_install
        install_python
    elif [[ $cmd == "nodejs" ]]; then
        check_isnt_sudo
        check_asdf_and_install
        install_nodejs

    else
        usage
    fi
}

main "$@"
